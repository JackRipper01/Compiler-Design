Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     expression -> NUMBER
Rule 3     expression -> MINUS expression
Rule 4     expression -> LPAREN expression RPAREN
Rule 5     expression -> expression PLUS expression
Rule 6     expression -> expression MINUS expression
Rule 7     expression -> expression TIMES expression
Rule 8     expression -> expression DIVIDE expression

Terminals, with rules where they appear

DIVIDE               : 8
LPAREN               : 4
MINUS                : 3 6
NUMBER               : 2
PLUS                 : 5
RPAREN               : 4
TIMES                : 7
error                : 

Nonterminals, with rules where they appear

expression           : 1 3 4 5 5 6 6 7 7 8 8
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) expression -> . NUMBER
    (3) expression -> . MINUS expression
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression

    NUMBER          shift and go to state 3
    MINUS           shift and go to state 4
    LPAREN          shift and go to state 5

    statement                      shift and go to state 1
    expression                     shift and go to state 2

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    $end            reduce using rule 1 (statement -> expression .)
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    TIMES           shift and go to state 8
    DIVIDE          shift and go to state 9


state 3

    (2) expression -> NUMBER .

    PLUS            reduce using rule 2 (expression -> NUMBER .)
    MINUS           reduce using rule 2 (expression -> NUMBER .)
    TIMES           reduce using rule 2 (expression -> NUMBER .)
    DIVIDE          reduce using rule 2 (expression -> NUMBER .)
    $end            reduce using rule 2 (expression -> NUMBER .)
    RPAREN          reduce using rule 2 (expression -> NUMBER .)


state 4

    (3) expression -> MINUS . expression
    (2) expression -> . NUMBER
    (3) expression -> . MINUS expression
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression

    NUMBER          shift and go to state 3
    MINUS           shift and go to state 4
    LPAREN          shift and go to state 5

    expression                     shift and go to state 10

state 5

    (4) expression -> LPAREN . expression RPAREN
    (2) expression -> . NUMBER
    (3) expression -> . MINUS expression
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression

    NUMBER          shift and go to state 3
    MINUS           shift and go to state 4
    LPAREN          shift and go to state 5

    expression                     shift and go to state 11

state 6

    (5) expression -> expression PLUS . expression
    (2) expression -> . NUMBER
    (3) expression -> . MINUS expression
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression

    NUMBER          shift and go to state 3
    MINUS           shift and go to state 4
    LPAREN          shift and go to state 5

    expression                     shift and go to state 12

state 7

    (6) expression -> expression MINUS . expression
    (2) expression -> . NUMBER
    (3) expression -> . MINUS expression
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression

    NUMBER          shift and go to state 3
    MINUS           shift and go to state 4
    LPAREN          shift and go to state 5

    expression                     shift and go to state 13

state 8

    (7) expression -> expression TIMES . expression
    (2) expression -> . NUMBER
    (3) expression -> . MINUS expression
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression

    NUMBER          shift and go to state 3
    MINUS           shift and go to state 4
    LPAREN          shift and go to state 5

    expression                     shift and go to state 14

state 9

    (8) expression -> expression DIVIDE . expression
    (2) expression -> . NUMBER
    (3) expression -> . MINUS expression
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression

    NUMBER          shift and go to state 3
    MINUS           shift and go to state 4
    LPAREN          shift and go to state 5

    expression                     shift and go to state 15

state 10

    (3) expression -> MINUS expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 3 (expression -> MINUS expression .)
    MINUS           reduce using rule 3 (expression -> MINUS expression .)
    TIMES           reduce using rule 3 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 3 (expression -> MINUS expression .)
    $end            reduce using rule 3 (expression -> MINUS expression .)
    RPAREN          reduce using rule 3 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 6 ]
  ! MINUS           [ shift and go to state 7 ]
  ! TIMES           [ shift and go to state 8 ]
  ! DIVIDE          [ shift and go to state 9 ]


state 11

    (4) expression -> LPAREN expression . RPAREN
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 16
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    TIMES           shift and go to state 8
    DIVIDE          shift and go to state 9


state 12

    (5) expression -> expression PLUS expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 5 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 5 (expression -> expression PLUS expression .)
    $end            reduce using rule 5 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 5 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 8
    DIVIDE          shift and go to state 9

  ! TIMES           [ reduce using rule 5 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 6 ]
  ! MINUS           [ shift and go to state 7 ]


state 13

    (6) expression -> expression MINUS expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 6 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 6 (expression -> expression MINUS expression .)
    $end            reduce using rule 6 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 6 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 8
    DIVIDE          shift and go to state 9

  ! TIMES           [ reduce using rule 6 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 6 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 6 ]
  ! MINUS           [ shift and go to state 7 ]


state 14

    (7) expression -> expression TIMES expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 7 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 7 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 7 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 7 (expression -> expression TIMES expression .)
    $end            reduce using rule 7 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 7 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 6 ]
  ! MINUS           [ shift and go to state 7 ]
  ! TIMES           [ shift and go to state 8 ]
  ! DIVIDE          [ shift and go to state 9 ]


state 15

    (8) expression -> expression DIVIDE expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 8 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 8 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 8 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 8 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 8 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 8 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 6 ]
  ! MINUS           [ shift and go to state 7 ]
  ! TIMES           [ shift and go to state 8 ]
  ! DIVIDE          [ shift and go to state 9 ]


state 16

    (4) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 4 (expression -> LPAREN expression RPAREN .)

